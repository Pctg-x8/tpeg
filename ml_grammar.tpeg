# Maple Latte Grammar declaration

package com.cterm2.ml

tokenizer
{
	module lexer

	skip_pattern	[ \t\r\n]
	skip_pattern	//[^\n]*\n
	skip_pattern	/*[^\*]*\*/
	patterns
	{
		INUMBER		[0-9]+
		HNUMBER		0x[0-9A-Fa-f]+
		FNUMBER		[0-9]*\.[0-9]+(f|F)
		DNUMBER		[0-9]*\.[0-9]+(d|D)
		NUMBER		[0-9]*\.[0-9]+
		STRING		@"[^"]*"
		CHARACTER	'[^']*'
		IDENTIFIER	[A-Za-z_][A-Za-z0-9_]*

		SEMICOLON	";"
		PERIOD		"."
		COMMA		","
		COLON		":"
		RARROW		"->"
		RARROW2		"=>"
		LARROW		"<-"
		SHARP		"#"
		EQUAL		"="
		PLUS_EQ		"+="
		MINUS_EQ	"-="
		ASTERISK_EQ	"*="
		SLASH_EQ	"/="
		PERCENT_EQ	"%="
		AMPASAND_EQ	"&="
		VL_EQ		"|="
		CA_EQ		"^="
		LAB2_EQ		"<<="
		RAB2_EQ		">>="

		AMPASAND2	"&&"
		VL2			"||"
		CA2			"^^"
		PLUS		"+"
		MINUS		"-"
		ASTERISK	"*"
		SLASH		"/"
		PERCENT		"%"
		AMPASAND	"&"
		VL			"|"
		CA			"^"
		LAB2		"<<"
		RAB2		">>"
		LAB			"<"
		RAB			">"
		LAB_EQ		"<="
		RAB_EQ		">="
		EQ2			"=="
		EX_EQ		"!="
		QUESTION	"?"
		PLUS2		"++"
		MINUS2		"--"
		ASTERISK2	"**"

		PERIOD2		".."
		PERIOD3		"..."

		LP			"("
		RP			")"
		LB			"{"
		RB			"}"
		LBR			"["
		RBR			"]"

		# keywords
		PACKAGE		"package"
		IMPORT		"import"
		CLASS		"class"
		TRAIT		"trait"
		ENUM		"enum"
		EXTENDS		"extends"
		WITH		"with"
		TEMPLATE	"template"
		ALIAS		"alias"
		USING		"using"
		PROPERTY	"property"
		FUNCTION	"funcion"

		IF			"if"
		ELSE		"else"
		WHILE		"while"
		DO			"do"
		FOREACH		"foreach"
		FOR			"for"
		RETURN		"return"
		BREAK		"break"
		CONTINUE	"continue"
		SWITCH		"switch"
		CASE		"case"
		DEFAULT		"default"

		TYPEOF		"typeof"
		THIS		"this"
		SUPER		"super"
		TRUE		"true"
		FALSE		"false"
		NULL		"null"

		PUBLIC		"public"
		PRIVATE		"private"
		PROTECTED	"protected"
		FINAL		"final"
		CONST		"const"
		STATIC		"static"
		OVERRIDE	"override"

		AUTO		"auto"
		VOID		"void"
		CHAR		"char"
		UCHAR		"uchar"
		BYTE		"byte"
		SHORT		"short"
		USHORT		"ushort"
		INT			"int"
		UINT		"uint"
		LONG		"long"
		ULONG		"ulong"
	}
}

parser
{
	module parser
	header
	{
import com.cterm2.ml.syntaxTree;
import std.typecons, std.conv;
	}

	start_rule compilation_unit
	rules
	{
		# entry #
		compilation_unit = { Token[] pn; DeclarationNode[] ds; }
			[package_def:pd { pn = pd; }] (script_element:se { ds ~= se; })* { return new ScriptNode(pn, ds); };
		package_def = PACKAGE package_id:pid SEMICOLON { return pid; };

		# declarations #
		script_element<DeclarationNode> =
			  import_decl:id		{ return id; } / partial_package_def:ppd	{ return ppd; }
			/ class_def:cd			{ return cd; } / trait_def:td				{ return td; }
			/ enum_def:ed			{ return ed; } / template_def:tmd			{ return tmd; }
			/ alias_def:ad			{ return ad; } / class_body:cb				{ return cb; };
		import_decl = IMPORT:ft import_list:il SEMICOLON { return new ImportDeclarationNode(ft.location, il); };
		partial_package_def = PACKAGE:ft package_id:pid
			( script_element:e { return new PartialPackageDeclarationNode(ft.location, pid, [e]); }
			/ LB { DeclarationNode[] elms; } (script_element:se { elms ~= se; })* RB
				{ return new PartialPackageDeclarationNode(ft.location, pid, elms); });
		class_def = { auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); TypeNode ef; TypeNode[] wts; }
			(class_qualifier:cq { q = q.combine(cq); })* CLASS:ft def_id:id [EXTENDS type:t { ef = t; }] (WITH type:wt { wts ~= wt; })*
				( SEMICOLON { return new ClassDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id, ef, wts, null); }
				/ LB { DeclarationNode[] dns; } (import_decl:idl { dns ~= idl; } / class_body:cb { dns ~= cb; })* RB
					{ return new ClassDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id, ef, wts, dns); });
		class_body<DeclarationNode> =
			  field_def:fd		{ return fd; } / method_def:md	{ return md; }
			/ property_def:pd	{ return pd; } / ctor_def:cd	{ return cd; }
			/ alias_def:ad		{ return ad; } / statement:st	{ return new StaticInitializerNode(st); };
		trait_def = { auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); TypeNode[] wts; }
			(trait_qualifier:tq { q = q.combine(tq); })* TRAIT:ft def_id:id (WITH type:t { wts ~= t; })*
				( SEMICOLON { return new TraitDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id, wts, null); }
				/ LB { DeclarationNode[] dns; } (import_decl:idl { dns ~= idl; } / trait_body:tb { dns ~= tb; })* RB
					{ return new TraitDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id, wts, dns); });
		trait_body<DeclarationNode> =
			  method_def:md	{ return md; } / property_def:pd	{ return pd; }
			/ ctor_def:cd	{ return cd; } / alias_def:ad		{ return ad; };
		enum_def = { auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			(enum_qualifier:eq { q = q.combine(eq); })* ENUM:ft IDENTIFIER:id
				( SEMICOLON { return new EnumDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id.text, null, null); }
				/ LB { DeclarationNode[] nodes; EnumElementNode[] bodies; }
					(import_decl:idl { nodes ~= idl; })* [enum_body:eb { bodies = eb; }] (import_decl:idl2 { nodes ~= idl2; } / class_body:cb { nodes ~= cb; })* RB
					{ return new EnumDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id.text, bodies, nodes); });
		enum_body = { EnumElementNode[] eens; }
			enum_element:ee { eens ~= ee; } (COMMA enum_element:ee2 { eens ~= ee2; })* [COMMA / SEMICOLON] { return eens; };
		enum_element = { ExpressionNode[] els; } IDENTIFIER:id [LP [expression_list:el { els = el; }] RP]
			{ return new EnumElementNode(id.location, id.text, els); };
		template_def = { TemplateVirtualParamNode[] template_vps = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			(template_qualifier:tq { q = q.combine(tq); })* TEMPLATE:ft IDENTIFIER:id LP [template_arg_list:tvps { template_vps = tvps; }] RP
				( SEMICOLON { return new TemplateDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id.text, template_vps, null); }
				/ template_body:tb { return new TemplateDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id.text, template_vps, [tb]); }
				/ LB { DeclarationNode[] child; } (template_body:tb { child ~= tb; })* RB
					{ return new TemplateDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, id.text, template_vps, child); });
		template_body<DeclarationNode> =
			  import_decl:id	{ return id; } / class_def:cd		{ return cd; }
			/ trait_def:td		{ return td; } / enum_def:ed		{ return ed; }
			/ template_def:tmd	{ return tmd; } / alias_def:ad		{ return ad; };
		alias_def = { DefinitionIdentifierNode id; TypeNode t; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			(alias_qualifier:aq { q = q.combine(aq); })* USING:ft (def_id:did EQUAL type:tt { id = did; t = tt; } / type:tt def_id:did { id = did; t = tt; })
				{ return new AliasDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, t, id); };

		# body declarations #
		field_def = { TypeNode t = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			((field_qualifier:fq { q = q.combine(fq); })* type:tp { t = tp; } / (field_qualifier:fq { q = q.combine(fq); })+)
				field_def_list:fdl SEMICOLON { return new FieldDeclarationNode(q.location.line == int.max ? t.location : q.location, q, t, fdl); };
		field_def_list = { NameValuePair[] nvplist; } nvpair:nvp { nvplist ~= nvp; } (COMMA nvpair:nvp2 { nvplist ~= nvp2; })* { return nvplist; };
		nvpair =
			  IDENTIFIER:id EQUAL expression:e { return new NameValuePair(id.location, id.text, e); }
			/ IDENTIFIER:id { return new NameValuePair(id.location, id.text, null); };
		method_def = function_def:fd { return fd; } / procedure_def:pd { return pd; } / abstract_method_def:amd { return amd; };
		procedure_def = { TypeNode t = null; VirtualParamNode[] vps = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			((method_qualifier:mq {q = q.combine(mq);})* type:tt { t = tt; } / (method_qualifier:mq {q = q.combine(mq);})+)
				def_id:id LP [varg_list:vpl { vps = vpl; }] RP statement:st
				{ return new MethodDeclarationNode(q.location.line == int.max ? t.location : q.location, q, t, id, vps, st); };
		function_def = { TypeNode t = null; VirtualParamNode[] vps = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			((method_qualifier:mq {q = q.combine(mq);})* type:tt { t = tt; } / (method_qualifier:mq {q = q.combine(mq);})+)
				def_id:id LP [varg_list:vpl { vps = vpl; }] RP EQUAL expression:e SEMICOLON
				{ return new MethodDeclarationNode(q.location.line == int.max ? t.location : q.location, q, t, id, vps, e); };
		abstract_method_def = { TypeNode t = null; VirtualParamNode[] vps = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			((method_qualifier:mq {q = q.combine(mq);})* type:tt { t = tt; } / (method_qualifier:mq {q = q.combine(mq);})+)
				def_id:id LP [varg_list:vpl { vps = vpl; }] RP SEMICOLON
				{ return new MethodDeclarationNode(q.location.line == int.max ? t.location : q.location, q, t, id, vps); };
		property_def<DeclarationNode> = getter_def:gd { return gd; } / setter_def:sd { return sd; };
		setter_def = { TypeNode tp = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			(method_qualifier:q2 { q = q.combine(q2); })* PROPERTY:ft [type:t { tp = t; }]
				def_id:id LP tn_pair:p RP
				( statement:st { return new SetterDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, tp, id, p, st); }
				/ SEMICOLON { return new SetterDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, tp, id, p, null); });
		getter_def = { TypeNode tp = null; auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			(method_qualifier:q2 { q = q.combine(q2); })* PROPERTY:ft [type:t { tp = t; }] def_id:id [LP RP]
				( EQUAL expression:e SEMICOLON { return new GetterDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, tp, id, e); }
				/ SEMICOLON { return new GetterDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, tp, id, null); }
				/ statement:st { return new GetterDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, tp, id, st); });
		ctor_def = full_ctor_def:fcd { return fcd; } / abs_ctor_def:acd { return acd; };
		ctor_quals = { auto q = Qualifier(Location(int.max, int.max), Qualifiers.Private); }
			(ctor_qualifier:cq { q = q.combine(cq); })* { return q; };
		full_ctor_def =
			  ctor_quals:q THIS:ft LP varg_list:vl RP statement:st	{ return new ConstructorDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, vl, st); }
			/ ctor_quals:q THIS:ft LP RP statement:st				{ return new ConstructorDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, null, st); };
		abs_ctor_def =
			  ctor_quals:q THIS:ft LP varg_list:vl RP SEMICOLON	{ return new ConstructorDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, vl, null); }
			/ ctor_quals:q THIS:ft LP RP SEMICOLON				{ return new ConstructorDeclarationNode(q.location.line == int.max ? ft.location : q.location, q, null, null); };

		tn_pair =
			  type:t IDENTIFIER:id { return new TypeNamePair(t.location, t, id.text); }
			/ IDENTIFIER:id { return new TypeNamePair(id.location, null, id.text); };
		tn_list = { TypeNamePair[] tnps; } tn_pair:tnp { tnps ~= tnp; } (COMMA tn_pair:tnp2 { tnps ~= tnp2; })* { return tnps; };

		# statements #
		statement<StatementNode> =
		 	  if_stmt:ifs				{ return ifs; }
			/ while_stmt:ws				{ return ws; }
			/ do_stmt:ds				{ return ds; }
			/ foreach_stmt:fes			{ return fes; }
			/ for_stmt:fs				{ return fs; }
			/ return_stmt:rs			{ return rs; }
			/ break_stmt:bs				{ return bs; }
			/ continue_stmt:cs			{ return cs; }
			/ switch_stmt:ss			{ return ss; }
			/ block_stmt:bls			{ return bls; }
			/ expression:e SEMICOLON	{ return e; }
			/ SEMICOLON					{ return null; };
		if_stmt =
			  IF:ft LP expression:c RP statement:t ELSE statement:n	{ return new ConditionalNode(ft.location, c, t, n); }
			/ IF:ft LP expression:c RP statement:t					{ return new ConditionalNode(ft.location, c, t, null); };
		while_stmt =
			  IDENTIFIER:id COLON WHILE:ft LP expression:e RP statement:st { return new PreConditionLoopNode(ft.location, id.text, e, st); }
			/ WHILE:ft LP expression:e RP statement:st { return new PreConditionLoopNode(ft.location, e, st); };
		do_stmt =
			  IDENTIFIER:id COLON DO:ft statement:st WHILE LP expression:c RP SEMICOLON { return new PostConditionLoopNode(ft.location, id.text, c, st); }
			/ DO:ft statement:st WHILE LP expression:c RP SEMICOLON { return new PostConditionLoopNode(ft.location, c, st); };
		foreach_stmt =
			  IDENTIFIER:id COLON foreach_stmt_impl:fs { return fs.withName(id.text); }
			/ foreach_stmt_impl:fs { return fs; };
		foreach_stmt_impl =
			FOREACH:ft LP tn_list:tnl LARROW expression:e RP statement:st { return new ForeachStatementNode(ft.location, tnl, e, st); };
		for_stmt =
			  IDENTIFIER:id COLON for_stmt_impl:fs { return fs.withName(id.text); }
			/ for_stmt_impl:fs { return fs; };
		for_stmt_impl =
			  FOR:ft LP expression:e SEMICOLON expression:e2 SEMICOLON expression:e3 RP statement:st { return new ForStatementNode(ft.location, e, e2, e3, st); }
			/ FOR:ft LP expression:e SEMICOLON expression:e2 SEMICOLON RP statement:st { return new ForStatementNode(ft.location, e, e2, null, st); }
			/ FOR:ft LP expression:e SEMICOLON SEMICOLON expression:e3 RP statement:st { return new ForStatementNode(ft.location, e, null, e3, st); }
			/ FOR:ft LP expression:e SEMICOLON SEMICOLON RP statement:st { return new ForStatementNode(ft.location, e, null, null, st); }
			/ FOR:ft LP SEMICOLON expression:e2 SEMICOLON expression:e3 RP statement:st { return new ForStatementNode(ft.location, null, e2, e3, st); }
			/ FOR:ft LP SEMICOLON expression:e2 SEMICOLON RP statement:st { return new ForStatementNode(ft.location, null, e2, null, st); }
			/ FOR:ft LP SEMICOLON SEMICOLON expression:e3 RP statement:st { return new ForStatementNode(ft.location, null, null, e3, st); }
			/ FOR:ft LP SEMICOLON SEMICOLON SEMICOLON RP statement:st { return new ForStatementNode(ft.location, null, null, null, st); };
		return_stmt =
			  RETURN:ft expression:e SEMICOLON { return new ReturnNode(ft.location, e); }
			/ RETURN:ft SEMICOLON { return new ReturnNode(ft.location, null); };
		break_stmt =
			  BREAK:ft IDENTIFIER:id SEMICOLON { return new BreakLoopNode(ft.location, id.text); }
			/ BREAK:ft SEMICOLON { return new BreakLoopNode(ft.location, null); };
		continue_stmt =
			  CONTINUE:ft IDENTIFIER:id SEMICOLON { return new ContinueLoopNode(ft.location, id.text); }
			/ CONTINUE:ft SEMICOLON { return new ContinueLoopNode(ft.location, null); };
		switch_stmt =
			SWITCH:ft LP expression:te RP LB { SwitchSectionNode[] sects; } (case_stmt:cs { sects ~= cs; } / default_stmt:ds { sects ~= ds; })* RB
			{ return new SwitchStatementNode(ft.location, te, sects); };
		case_stmt<SwitchSectionNode> = value_case_sect:vcs { return vcs; } / type_case_sect:tcs { return tcs; };
		value_case_sect = CASE:ft expression_list:el RARROW2 statement:st { return new ValueCaseSectionNode(ft.location, el, st); };
		type_case_sect =
			  CASE:ft CONST def_id:id COLON type:t IF expression:e RARROW2 statement:st	{ return new TypeCaseSectionNode(ft.location, true, id, t, e, st); }
			/ CASE:ft CONST def_id:id COLON type:t RARROW2 statement:st					{ return new TypeCaseSectionNode(ft.location, true, id, t, null, st); }
			/ CASE:ft def_id:id COLON type:t IF expression:e RARROW2 statement:st		{ return new TypeCaseSectionNode(ft.location, false, id, t, e, st); }
			/ CASE:ft def_id:id COLON type:t RARROW2 statement:st						{ return new TypeCaseSectionNode(ft.location, false, id, t, null, st); };
		default_stmt = DEFAULT:ft RARROW2 statement:s { return new DefaultSectionNode(ft.location, s); };
		block_stmt = LBR:t { StatementNode[] stmts; } (localvar_def:lvd { stmts ~= lvd; } / statement:st { stmts ~= st; })* RBR
			{ return new BlockStatementNode(t.location, stmts); };
		localvar_def = full_lvd:flvd { return flvd; } / inferenced_lvd:ilvd { return ilvd; };
		nvp_list = { NameValuePair[] nvps; } nvpair:nvp { nvps ~= nvp; } (COMMA nvpair:nvp2 { nvps ~= nvp2; })* { return nvps; };
		full_lvd = { auto q = Qualifier(Location(int.max, int.max), Qualifiers.Public); }
			(lvar_qualifier:lq { q = q.combine(lq); })* type:tp nvp_list:nvps SEMICOLON
			{ return new LocalVariableDeclarationNode(q.location.line == int.max ? tp.location : q.location, q, tp, nvps); };
		inferenced_lvd =
			lvar_qualifier:q (lvar_qualifier:q2 { q = q.combine(q2); })* nvp_list:nvps SEMICOLON
			{ return new LocalVariableDeclarationNode(q.location, q, new InferenceTypeNode(q.location), nvps); };

		# expressions #
		expression_list = { ExpressionNode[] elist; }
			expression:e { elist ~= e; } (COMMA expression:e2 { elist ~= e2; })* { return elist; };
		expression<ExpressionNode> =
			  postfix_expr:l EQUAL expression:r			{ return new AssignOperatorNode(l, r); }
			/ postfix_expr:l assign_ops:o expression:r	{ return new OperatedAssignNode(l, o, r); }
			/ alternate_expr:e							{ return e; };
		assign_ops =
			  PLUS_EQ		{ return BinaryOperatorType.Add; }
			/ MINUS_EQ		{ return BinaryOperatorType.Sub; }
			/ ASTERISK_EQ	{ return BinaryOperatorType.Mul; }
			/ SLASH_EQ		{ return BinaryOperatorType.Div; }
			/ PERCENT_EQ	{ return BinaryOperatorType.Mod; }
			/ AMPASAND_EQ	{ return BinaryOperatorType.And; }
			/ VL_EQ			{ return BinaryOperatorType.Or; }
			/ CA_EQ			{ return BinaryOperatorType.Xor; }
			/ LAB2_EQ		{ return BinaryOperatorType.LeftShift; }
			/ RAB2_EQ		{ return BinaryOperatorType.RightShift; };
		alternate_expr<ExpressionNode> = short_expr:e
			[QUESTION short_expr:t COLON short_expr:n { e = new AlternateValueNode(e, t, n); }] { return e; };
		short_expr<ExpressionNode> = comp_expr:e
			( AMPASAND2 comp_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.LogAnd, e2); }
			/ VL2 comp_expr:e2			{ e = new BinaryOperatorNode(e, BinaryOperatorType.LogOr, e2); }
			/ CA2 comp_expr:e2			{ e = new BinaryOperatorNode(e, BinaryOperatorType.LogXor, e2); })* { return e; };
		comp_expr<ExpressionNode> = shift_expr:e
			( LAB shift_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.Less, e2); }
			/ RAB shift_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.Greater, e2); }
			/ EQ2 shift_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.Equiv, e2); }
			/ EX_EQ shift_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.Inequiv, e2); }
			/ LAB_EQ shift_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.LessEq, e2); }
			/ RAB_EQ shift_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.GreaterEq, e2); })* { return e; };
		shift_expr<ExpressionNode> = bit_expr:e
			( LAB2 bit_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.LeftShift, e2); }
			/ RAB2 bit_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.RightShift, e2); })* { return e; };
		bit_expr<ExpressionNode> = a1_expr:e
			( AMPASAND a1_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.And, e2); }
			/ VL a1_expr:e2			{ e = new BinaryOperatorNode(e, BinaryOperatorType.Or, e2); }
			/ CA a1_expr:e2			{ e = new BinaryOperatorNode(e, BinaryOperatorType.Xor, e2); })* { return e; };
		a1_expr<ExpressionNode> = a2_expr:e
			( PLUS a2_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.Add, e2); }
			/ MINUS a2_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.Sub, e2); })* { return e; };
		a2_expr<ExpressionNode> = range_expr:e
			( ASTERISK range_expr:e2	{ e = new BinaryOperatorNode(e, BinaryOperatorType.Mul, e2); }
			/ SLASH range_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.Div, e2); }
			/ PERCENT range_expr:e2		{ e = new BinaryOperatorNode(e, BinaryOperatorType.Mod, e2); })* { return e; };
		range_expr<ExpressionNode> =
			prefix_expr:e (PERIOD2 prefix_expr:e2 { e = new BinaryOperatorNode(e, BinaryOperatorType.Ranged, e2); })* { return e; };
		prefix_expr<ExpressionNode> =
			  PLUS prefix_expr:e		{ return e; }
			/ MINUS:t prefix_expr:e		{ return new PreOperatorNode(t.location, e, UnaryOperatorType.Negate); }
			/ PLUS2:t prefix_expr:e		{ return new PreOperatorNode(t.location, e, UnaryOperatorType.Increase); }
			/ MINUS2:t prefix_expr:e	{ return new PreOperatorNode(t.location, e, UnaryOperatorType.Decrease); }
			/ ASTERISK2:t prefix_expr:e	{ return new PreOperatorNode(t.location, e, UnaryOperatorType.Square); }
			/ postfix_expr:e			{ return e; };
		postfix_expr<ExpressionNode> = primary_expr:e
			( PLUS2									{ e = new PostOperatorNode(e, UnaryOperatorType.Increase); }
			/ MINUS2								{ e = new PostOperatorNode(e, UnaryOperatorType.Decrease); }
			/ ASTERISK2								{ e = new PostOperatorNode(e, UnaryOperatorType.Square); }
			/ LBR expression:d RBR					{ e = new ArrayRefNode(e, [d]); }
			/ LBR RBR								{ e = new ArrayRefNode(e, null); }
			/ LP expression_list:ps RP				{ e = new FuncallNode(e, ps); }
			/ LP RP									{ e = new FuncallNode(e, null); }
			/ PERIOD IDENTIFIER:id template_tail:tt	{ e = new ObjectRefNode(e, new TemplateInstantiateNode(id.location, id.text, tt)); }
			/ PERIOD IDENTIFIER:id					{ e = new ObjectRefNode(e, new IdentifierReferenceNode(id.location, id.text)); }
			/ RARROW single_types:st				{ e = new CastingNode(e, st); }
			/ RARROW LP restricted_type:rt RP		{ e = new CastingNode(e, rt); })* { return e; };
		primary_expr<ExpressionNode> =
			  literals:l						{ return l; }
			/ special_literals:sl				{ return sl; }
			/ lambda_expr:le					{ return le; }
			/ LP expression:e RP				{ return e; }
			/ IDENTIFIER:id template_tail:tt	{ return new TemplateInstantiateNode(id.location, id.text, tt); }
			/ IDENTIFIER:id						{ return new IdentifierReferenceNode(id.location, id.text); };
		literals<ExpressionNode> =
			  INUMBER:t				{ return new IntLiteralNode(t.location, t.text.to!int); }
			/ HNUMBER:t				{ return new IntLiteralNode(t.location, t.text.to!int(16)); }
			/ FNUMBER:t				{ return new FloatLiteralNode(t.location, t.text.to!float); }
			/ DNUMBER:t				{ return new DoubleLiteralNode(t.location, t.text.to!double); }
			/ NUMBER:t				{ return new NumericLiteralNode(t.location, t.text.to!real); }
			/ STRING:t				{ return new StringLiteralNode(t.location, t.text); }
			/ CHARACTER:t			{ return new CharacterLiteralNode(t.location, t.text[0]); }
			/ function_literal:fl	{ return fl; }
			/ array_literal:al		{ return al; };
		function_literal =
			  FUNCTION:f LP literal_varg_list:vl RP block_stmt:bs	{ return new FunctionLiteralNode(f.location, vl, bs); }
			/ FUNCTION:f LP RP block_stmt:bs						{ return new FunctionLiteralNode(f.location, null, bs); };
		array_literal<ExpressionNode> =
			  LBR:ft expression_list:el RBR { return new ArrayLiteralNode(ft.location, el); }
			/ LBR:ft assoc_array_element_list:el RBR { return new AssocArrayLiteralNode(ft.location, el); }
			/ LBR:ft RBR { return new ArrayLiteralNode(ft.location, null); };
		special_literals<ExpressionNode> =
			  THIS:t		{ return new ThisReferenceNode(t.location); }
			/ SUPER:t		{ return new SuperReferenceNode(t.location); }
			/ TRUE:t		{ return new BooleanLiteralNode(t.location, true); }
			/ FALSE:t		{ return new BooleanLiteralNode(t.location, false); }
			/ NULL:t		{ return new NullLiteralNode(t.location); };
		lambda_expr =
			  LP:t literal_varg_list:ps RP RARROW2 expression:e { return new FunctionLiteralNode(t.location, ps, e); }
			/ LP:t RP RARROW2 expression:e { return new FunctionLiteralNode(t.location, null, e); }
			/ literal_varg:vp RARROW2 expression:e { return new FunctionLiteralNode(vp, e); };

		# arglists #
		template_arg_list = { TemplateVirtualParamNode[] params; }
			template_arg:p { params ~= p; } (COMMA template_arg:p2 { params ~= p2; })* { return params; };
		template_arg = template_arg_head:head (EQUAL type:t { head = new TemplateVirtualParamNode(head, t); })* { return head; };
		template_arg_type = { alias ReturnType = Tuple!(TemplateVirtualParamNode.ParamType, "type", TypeNode, "stype", Location, "location"); }
			( type:t { return ReturnType(TemplateVirtualParamNode.ParamType.Type, t, t.location); }
			/ CLASS:tk { return ReturnType(TemplateVirtualParamNode.ParamType.Class, null, tk.location); }
			/ ALIAS:tk { return ReturnType(TemplateVirtualParamNode.ParamType.SymbolAlias, null, tk.location); });
		template_arg_head =
			  template_arg_type:type IDENTIFIER:id	{ return new TemplateVirtualParamNode(type.location, type.type, type.stype, id.text); }
			/ IDENTIFIER:id							{ return new TemplateVirtualParamNode(id.location, TemplateVirtualParamNode.ParamType.Any, null, id.text); };
		varg_list = { VirtualParamNode params[]; }
			varg:t { params ~= t; } (COMMA varg:v { params ~= v; })* { return params; };
		varg = type:t IDENTIFIER:n EQUAL expression:dv PERIOD3 { return new VirtualParamNode(t, n.text, dv, true); }
			/ type:t IDENTIFIER:n EQUAL expression:dv { return new VirtualParamNode(t, n.text, dv, false); }
			/ type:t IDENTIFIER:n PERIOD3 { return new VirtualParamNode(t, n.text, null, true); }
			/ type:t IDENTIFIER:n { return new VirtualParamNode(t, n.text, null, false); }
			/ type:t PERIOD3 { return new VirtualParamNode(t, null, null, true); }
			/ type:t { return new VirtualParamNode(t, null, null, false); };
		literal_varg_list = { VirtualParamNode[] params; }
			literal_varg:p1 { params ~= p1; } (COMMA literal_varg:p2 { params ~= p2; })* { return params; };
		literal_varg =
			  type:t IDENTIFIER:id EQUAL expression:e PERIOD3	{ return new VirtualParamNode(t, id.text, e, true); }
			/ type:t IDENTIFIER:id EQUAL expression:e			{ return new VirtualParamNode(t, id.text, e, false); }
			/ type:t IDENTIFIER:id PERIOD3						{ return new VirtualParamNode(t, id.text, null, true); }
			/ type:t IDENTIFIER:id								{ return new VirtualParamNode(t, id.text, null, false); }
			/ IDENTIFIER:id EQUAL expression:e PERIOD3			{ return new VirtualParamNode(new InferenceTypeNode(id.location), id.text, e, true); }
			/ IDENTIFIER:id EQUAL expression:e					{ return new VirtualParamNode(new InferenceTypeNode(id.location), id.text, e, false); }
			/ IDENTIFIER:id PERIOD3								{ return new VirtualParamNode(new InferenceTypeNode(id.location), id.text, null, true); }
			/ IDENTIFIER:id										{ return new VirtualParamNode(new InferenceTypeNode(id.location), id.text, null, false); };
		assoc_array_element_list = { AssocArrayElementNode[] nodes; }
			assoc_array_element:n { nodes ~= n; } (COMMA assoc_array_element:n2 { nodes ~= n2; })* { return nodes; };
		assoc_array_element =
			expression:k COLON expression:v { return new AssocArrayElementNode(k, v); };

		# qualifiers #
		class_qualifier =
			  PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ FINAL:t { return Qualifier(t.location, Qualifiers.Final); }
			/ STATIC:t { return Qualifier(t.location, Qualifiers.Static); };
		trait_qualifier =
		 	 PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ STATIC:t { return Qualifier(t.location, Qualifiers.Static); };
		enum_qualifier =
		 	 PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ STATIC:t { return Qualifier(t.location, Qualifiers.Static); };
		template_qualifier =
			  PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); };
		alias_qualifier =
			  PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); };
		type_qualifier = CONST:t { return Qualifier(t.location, Qualifiers.Const); };
		field_qualifier =
			  PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ PROTECTED:t { return Qualifier(t.location, Qualifiers.Protected); }
			/ STATIC:t { return Qualifier(t.location, Qualifiers.Static); }
			/ FINAL:t { return Qualifier(t.location, Qualifiers.Final); }
			/ CONST:t { return Qualifier(t.location, Qualifiers.Const); };
		method_qualifier =
			  PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ PROTECTED:t { return Qualifier(t.location, Qualifiers.Protected); }
			/ STATIC:t { return Qualifier(t.location, Qualifiers.Static); }
			/ FINAL:t { return Qualifier(t.location, Qualifiers.Final); }
			/ CONST:t { return Qualifier(t.location, Qualifiers.Const); }
			/ OVERRIDE:t { return Qualifier(t.location, Qualifiers.Override); };
		ctor_qualifier =
			  PUBLIC:t { return Qualifier(t.location, Qualifiers.Public); }
			/ PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ PROTECTED:t { return Qualifier(t.location, Qualifiers.Protected); }
			/ CONST:t { return Qualifier(t.location, Qualifiers.Const); };
		lvar_qualifier =
			  PRIVATE:t { return Qualifier(t.location, Qualifiers.Private); }
			/ PROTECTED:t { return Qualifier(t.location, Qualifiers.Protected); }
			/ CONST:t { return Qualifier(t.location, Qualifiers.Const); }
			/ STATIC:t { return Qualifier(t.location, Qualifiers.Static); };

		# types for definition #
		def_id<DefinitionIdentifierNode> =
			  IDENTIFIER:id LBR def_id_arg_list:params RBR { return new DefinitionIdentifierNode(id.location, id.text, params); }
			/ IDENTIFIER:id [LBR RBR] { return new DefinitionIdentifierNode(id.location, id.text, null); };
		def_id_arg_list<DefinitionIdentifierParamNode[]> = { DefinitionIdentifierParamNode[] nodes; }
			def_id_arg:first_t { nodes ~= first_t; } (COMMA def_id_arg:second_t { nodes ~= second_t; })* { return nodes; };
		def_id_arg<DefinitionIdentifierParamNode> =
			def_id_argname:n
			(EQUAL type:t { n = n.withDefaultValue(t); }
				/ COLON type:t { n = n.withExtendedFrom(t); }
				/ RARROW type:t { n = n.withCastableTo(t); })* { return n; };
		def_id_argname = IDENTIFIER:t { return new DefinitionIdentifierParamNode(t.location, t.text); };

		# types for using #
		type<TypeNode> =
			{ auto tq = Qualifier(Location(int.max, int.max), 0); bool hasQualifier = false; }
			(type_qualifier:tqq { tq = tq.combine(tqq); hasQualifier = true; })*
			type_body:tb
			{ return hasQualifier ? new QualifiedTypeNode(tq, tb) : tb; };
		type_body = type_body_base:tbb
			[FUNCTION LP varg_list:vpl RP { tbb = new FunctionTypeNode(tbb, vpl); }
			/ FUNCTION LP RP { tbb = new FunctionTypeNode(tbb, null); }]
			{ return tbb; };
		type_body_base = AUTO:a { return new InferenceTypeNode(a.location); }
			/ restricted_type:rt { return rt; };
		restricted_type<TypeNode> = primitive_types:pt (LBR expression:e RBR { pt = new ArrayTypeNode(pt, e); }
			/ LBR RBR { pt = new ArrayTypeNode(pt, null); })*
			{ return pt; };
		primitive_types<TypeNode> = register_types:rt { return rt; }
			/ template_instance:ti { return ti; }
			/ __typeof:to { return to; };
		__typeof<TypeofNode> =
			TYPEOF:f LP (expression:e RP { return new TypeofNode(f.location, e); }
			/ restricted_type:rt RP { return new TypeofNode(f.location, rt); });
		register_types<RegisterTypeNode> =
			  VOID:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Void); }
			/ CHAR:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Char); }
			/ UCHAR:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Uchar); }
			/ BYTE:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Byte); }
			/ SHORT:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Short); }
			/ USHORT:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Ushort); }
			/ INT:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Int); }
			/ UINT:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Uint); }
			/ LONG:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Long); }
			/ ULONG:t { return new RegisterTypeNode(t.location, RegisterTypeNode.Type.Ulong); };
		template_instance<TemplateInstanceTypeNode> =
			IDENTIFIER:t [template_tail:v { return new TemplateInstanceTypeNode(t.location, t.text, v); }]
			{ return new TemplateInstanceTypeNode(t.location, t.text, null); };
		template_tail<TemplateParamNode[]> =
			  SHARP single_types:st { return [new TemplateParamNode(st.location, st)]; }
			/ SHARP primary_expr:pe { return [new TemplateParamNode(pe.location, pe)]; }
			/ { TemplateParamNode[] params; } SHARP LP template_param:first_t { params ~= first_t; } (COMMA template_param:second_t { params ~= second_t; })* RP { return params; }
			/ SHARP LP RP { return null; };
		template_param<TemplateParamNode> =
			  IDENTIFIER:id { return new TemplateParamNode(id.location, id.text); }
			/ restricted_type:rt { return new TemplateParamNode(rt.location, rt); }
			/ expression:e { return new TemplateParamNode(e.location, e); };
		single_types<TypeNode> =
			  AUTO:a { return new InferenceTypeNode(a.location); }
			/ single_restricted_type:srt { return srt; };
		single_restricted_type<TypeNode> =
			  register_types:rt { return rt; }
			/ IDENTIFIER:t { return new TemplateInstanceTypeNode(t.location, t.text, null); };

		# package paths #
		import_list<ImportUnitNode[]> = { ImportUnitNode[] ius; }
			import_item:ii { ius ~= ii; } (COMMA import_item:ii2 { ius ~= ii2; })* { return ius; };
		import_item<ImportUnitNode> = { string[] ppath; }
			IDENTIFIER:ft { ppath ~= ft.text; } (PERIOD IDENTIFIER:st { ppath ~= st.text; })*
				[ PERIOD ASTERISK { return new ImportUnitNode(ft.location, ppath, true); }
				/ PERIOD LB import_list:sps RB { return new ImportUnitNode(ft.location, ppath, sps); }]
				{ return new ImportUnitNode(ft.location, ppath, false); };
		package_id<Token[]> = { Token[] ids; }
			IDENTIFIER:t { ids ~= t; } (PERIOD IDENTIFIER:t2 { ids ~= t2; })* { return ids; };
	}
}
